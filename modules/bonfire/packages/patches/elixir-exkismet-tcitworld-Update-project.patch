From 1a87cf55eca8596365e766f7dfbd7d7dfce21b39 Mon Sep 17 00:00:00 2001
From: Thomas Citharel <tcit@tcit.fr>
Date: Wed, 29 Sep 2021 12:05:09 +0200
Subject: [PATCH 1/2] Update project

* Bump required Elixir version to 1.10
* Bump deps
* Add Elixir formatter support, Credo, Doctor and Dialyzer
* Introduce a `Exkismet.Comment` structure to constrain fields
* Refactor
* Remove config through env variables

Signed-off-by: Thomas Citharel <tcit@tcit.fr>
---
 .doctor.exs                |  15 ++++
 .formatter.exs             |   3 +
 .github/workflows/main.yml |  78 ++++++++++++++++++++
 README.md                  |  45 ++++--------
 config/config.exs          |  32 --------
 lib/exkismet.ex            | 146 +++++++++++++++++++++++++++++++++----
 lib/exkismet/api.ex        |  88 ----------------------
 lib/exkismet/comment.ex    |  78 ++++++++++++++++++++
 lib/exkismet/service.ex    |  67 +++++++++++------
 mix.exs                    |  33 +++++----
 mix.lock                   |  41 ++++++++---
 test/api_test.exs          |  46 ------------
 test/exkismet_test.exs     |  58 ++++++++++++++-
 13 files changed, 466 insertions(+), 264 deletions(-)
 create mode 100644 .doctor.exs
 create mode 100644 .formatter.exs
 create mode 100644 .github/workflows/main.yml
 delete mode 100644 config/config.exs
 delete mode 100644 lib/exkismet/api.ex
 create mode 100644 lib/exkismet/comment.ex
 delete mode 100644 test/api_test.exs

diff --git a/.doctor.exs b/.doctor.exs
new file mode 100644
index 0000000..8142110
--- /dev/null
+++ b/.doctor.exs
@@ -0,0 +1,15 @@
+%Doctor.Config{
+  exception_moduledoc_required: true,
+  failed: false,
+  ignore_modules: [],
+  ignore_paths: [],
+  min_module_doc_coverage: 100,
+  min_module_spec_coverage: 100,
+  min_overall_doc_coverage: 100,
+  min_overall_spec_coverage: 100,
+  moduledoc_required: true,
+  raise: false,
+  reporter: Doctor.Reporters.Full,
+  struct_type_spec_required: true,
+  umbrella: false
+}
diff --git a/.formatter.exs b/.formatter.exs
new file mode 100644
index 0000000..d304ff3
--- /dev/null
+++ b/.formatter.exs
@@ -0,0 +1,3 @@
+[
+  inputs: ["{mix,.formatter}.exs", "{config,lib,test}/**/*.{ex,exs}"]
+]
diff --git a/.github/workflows/main.yml b/.github/workflows/main.yml
new file mode 100644
index 0000000..6554958
--- /dev/null
+++ b/.github/workflows/main.yml
@@ -0,0 +1,78 @@
+name: CI
+
+on: [push, pull_request]
+
+jobs:
+  mix_test:
+    name: mix test (Elixir ${{matrix.elixir}} | Erlang/OTP ${{matrix.otp}})
+    runs-on: ubuntu-latest
+    strategy:
+      fail-fast: false
+      matrix:
+        include:
+          - elixir: 1.10.x
+            otp: 22.3.4.20
+            tests_may_fail: false
+          - elixir: 1.11.x
+            otp: 23.3.4.4
+            tests_may_fail: false
+          - elixir: 1.12.x
+            otp: 23.3.4.4
+            tests_may_fail: false
+          - elixir: 1.12.x
+            otp: 24.0.x
+            tests_may_fail: false
+            warnings_as_errors: true
+            check_formatted: true
+            health: true
+    env:
+      MIX_ENV: test
+    steps:
+      - uses: actions/checkout@v2
+      - uses: erlef/setup-elixir@v1
+        with:
+          otp-version: ${{matrix.otp}}
+          elixir-version: ${{matrix.elixir}}
+      - name: Install Dependencies
+        run: |
+          mix local.hex --force
+          mix local.rebar --force
+          mix deps.get --only test
+      - run: mix format --check-formatted
+        if: matrix.check_formatted
+      - run: mix compile --warnings-as-errors
+        if: matrix.warnings_as_errors
+      - run: mix credo --strict
+        if: matrix.health
+      - run: mix test || ${{ matrix.tests_may_fail }}
+        env:
+          AKISMET_KEY: ${{ secrets.AKISMET_KEY }}
+  static_analysis:
+    name: static analysis (Elixir ${{matrix.elixir}} | Erlang/OTP ${{matrix.otp}})
+    runs-on: ubuntu-latest
+    strategy:
+      matrix:
+        include:
+          - elixir: 1.12.x
+            otp: 24.0.x
+    steps:
+      - uses: actions/checkout@v2
+      - uses: erlef/setup-beam@v1
+        with:
+          otp-version: ${{matrix.otp}}
+          elixir-version: ${{matrix.elixir}}
+      - name: Cache build artifacts
+        uses: actions/cache@v2
+        with:
+          path: |
+            ~/.hex
+            ~/.mix
+            _build
+          key: ${{ matrix.otp }}-${{ matrix.elixir }}-static_analysis-build
+      - name: Install Dependencies
+        run: |
+          mix local.hex --force
+          mix local.rebar --force
+          mix deps.get
+      - run: mix doctor
+      - run: mix dialyzer
diff --git a/README.md b/README.md
index c315ad2..d1b0bdf 100644
--- a/README.md
+++ b/README.md
@@ -4,46 +4,31 @@ Exkismet is a simple Elixir client for the Akismet.com spam detection API.
 
 ## Installation
 
-The package can be installed as:
-
-  1. Add exkismet to your list of dependencies in `mix.exs`:
-
-        def deps do
-          [{:exkismet, "~> 0.0.2"}]
-        end
-
-  2. Ensure exkismet is started before your application:
-
-        def application do
-          [applications: [:exkismet]]
-        end
-
-## Configuration
-
-  1. Add the following line to your `config.exs` file:
-
-      `config :exkismet, key: "<your api key>", blog: "http://<yourhosturl>"`
+The package can be installed by adding exkismet to your list of dependencies in `mix.exs`:
 
+```elixir
+  def deps do
+    [{:exkismet, "~> 0.0.3"}]
+  end
+```
 
 ## Test
-```
-   iex -S mix
-   iex(1)> Exkismet.Api.verify
-   :valid
-   iex(2)>
+```elixir
+iex(1)> Exkismet.Api.verify(key: "mykey")
+:valid
 ```
 ## Checking for spam
-```
-  Exkismet.Api.comment_check(%{...})  
+```elixir
+Exkismet.comment_check(%Exkismet.Comment{…}, key: "mykey")
 ```
   returns `:ham`, if the comment appears to be ok, `:spam` if it's suspicious, and
   `:discard` if Akismet is 100% certain that it's looking at spam.
 
 ## Reporting spam
-```
-  Exkismet.Api.submit_spam(%{...})
+```elixir
+Exkismet.Api.submit_spam(%Exkismet.Comment{…}, key: "mykey")
 ```
 ## Reporting ham (non-spam)
-```
-  Exkismet.Api.submit_ham(%{...})
+```elixir
+Exkismet.Api.submit_ham(%Exkismet.Comment{…}, key: "mykey")
 ```
diff --git a/config/config.exs b/config/config.exs
deleted file mode 100644
index 2d557a0..0000000
--- a/config/config.exs
+++ /dev/null
@@ -1,32 +0,0 @@
-# This file is responsible for configuring your application
-# and its dependencies with the aid of the Mix.Config module.
-use Mix.Config
-
-# This configuration is loaded before any dependency and is restricted
-# to this project. If another project depends on this project, this
-# file won't be loaded nor affect the parent project. For this reason,
-# if you want to provide default values for your application for
-# 3rd-party users, it should be done in your "mix.exs" file.
-
-# You can configure for your application as:
-#
-#     config :exkismet, key: :value
-#
-# And access this configuration in your application as:
-#
-#     Application.get_env(:exkismet, :key)
-#
-# Or configure a 3rd-party app:
-#
-#     config :logger, level: :info
-#
-
-config :exkismet, key: System.get_env("AKISMET_KEY"), blog: "http://localhost"
-
-# It is also possible to import configuration files, relative to this
-# directory. For example, you can emulate configuration per environment
-# by uncommenting the line below and defining dev.exs, test.exs and such.
-# Configuration from the imported file will override the ones defined
-# here (which is why it is important to import them last).
-#
-#     import_config "#{Mix.env}.exs"
diff --git a/lib/exkismet.ex b/lib/exkismet.ex
index fc3f4b3..1c1ec89 100644
--- a/lib/exkismet.ex
+++ b/lib/exkismet.ex
@@ -1,19 +1,133 @@
 defmodule Exkismet do
-  use Application
-
-  # See http://elixir-lang.org/docs/stable/elixir/Application.html
-  # for more information on OTP Applications
-  def start(_type, _args) do
-    import Supervisor.Spec, warn: false
-
-    children = [
-      # Define workers and child supervisors to be supervised
-      # worker(Exkismet.Worker, [arg1, arg2, arg3]),
-    ]
-
-    # See http://elixir-lang.org/docs/stable/elixir/Supervisor.html
-    # for other strategies and supported options
-    opts = [strategy: :one_for_one, name: Exkismet.Supervisor]
-    Supervisor.start_link(children, opts)
+  @moduledoc """
+  The Exkismet module provides a simple method for calling the Akismet API.
+
+  You need to build a `Exkismet.Comment` structure from your data to call the functions.
+
+  ## Shared options
+
+  * `:key`: Your Akismet API key. Required.
+  * `:request_user_agent`: The user-agent that will be used to make the request to Akismet. Defaults to `"Exkismet/%version%"`.
+  """
+  alias Exkismet.Comment
+
+  @doc """
+  Validates your API key with akismet.com.
+
+  ## Options
+
+  * `:blog`: The front page or home URL of the instance making the request. Must be a full URI, including `http://…`
+
+  See the ["Shared options"](#module-shared-options) section at the module
+  documentation for more options.
+
+  ## Examples
+
+      iex> verify(key: "mykey", blog: "https://mywebsite.com")
+      :valid
+
+      iex> verify(key: "invalid-key", blog: "https://mywebsite.com")
+      :invalid
+  """
+  @spec verify([{:key, String.t()}, {:blog, String.t()}, {:request_user_agent, String.t()}]) ::
+          :valid | {:invalid, HTTPoison.Response.t()}
+  def verify(options) do
+    case Exkismet.Service.verify(options) do
+      %{body: "valid"} -> :valid
+      error -> {:invalid, error}
+    end
+  end
+
+  @type options :: [{:key, String.t()}, {:request_user_agent, String.t()}]
+
+  @doc """
+  Checks a comment with Akismet. Takes a `Exkismet.Comment` entity and the `key: "mykey"` as options.
+
+  ## Options
+  See the ["Shared options"](#module-shared-options) section at the module
+  documentation for more options.
+
+  ## Examples
+
+      iex> comment_check(%Exkismet.Comment{
+              blog: "https://suspicious-website.com",
+              user_ip: "1.2.4.5"
+           }, key: "mykey")
+      :spam
+
+      iex> comment_check(%Exkismet.Comment{
+              blog: "https://clean-website.com",
+              user_ip: "4.5.6.7"
+           }, key: "mykey")
+      :ham
+  """
+  @spec comment_check(Comment.t(), options()) ::
+          :ham | :spam | :discard | {:error, HTTPoison.Response.t()}
+  def comment_check(%Comment{} = comment, options) do
+    %HTTPoison.Response{headers: headers, body: body} =
+      response = Exkismet.Service.comment_check(comment, options)
+
+    cond do
+      get_header(headers, "X-akismet-pro-tip") == "discard" -> :discard
+      body == "true" -> :spam
+      body == "false" -> :ham
+      true -> {:error, response}
+    end
+  end
+
+  @doc """
+  Report a comment as being spam. Takes a `Exkismet.Comment` entity.
+
+  ## Options
+  See the ["Shared options"](#module-shared-options) section at the module
+  documentation for more options.
+
+  ## Examples
+
+      iex> submit_spam(%Exkismet.Comment{
+              blog: "https://suspicious-website.com",
+              user_ip: "1.2.4.5"
+           }, key: "mykey")
+      :ok
+  """
+  @spec submit_spam(Comment.t(), options()) :: :ok | {:error, HTTPoison.Response.t()}
+  def submit_spam(%Comment{} = comment, options) do
+    case Exkismet.Service.submit_spam(comment, options) do
+      %HTTPoison.Response{body: "Thanks" <> _} -> :ok
+      error -> {:error, error}
+    end
+  end
+
+  @doc """
+  Report a comment as being ham (not spam). Takes a `Exkismet.Comment` entity.
+
+  ## Options
+  See the ["Shared options"](#module-shared-options) section at the module
+  documentation for more options.
+
+  ## Examples
+
+      iex> submit_ham(%Exkismet.Comment{
+              blog: "https://suspicious-website.com",
+              user_ip: "1.2.4.5"
+           }, key: "mykey")
+      :ok
+  """
+  @spec submit_ham(Comment.t(), options()) :: :ok | {:error, HTTPoison.Response.t()}
+  def submit_ham(%Comment{} = comment, options) do
+    case Exkismet.Service.submit_ham(comment, options) do
+      %HTTPoison.Response{body: "Thanks" <> _} -> :ok
+      error -> {:error, error}
+    end
+  end
+
+  @spec get_header(Enum.t(), String.t()) :: String.t() | nil
+  defp get_header(headers, key) do
+    key = String.downcase(key)
+
+    case List.keyfind(headers, key, 0) do
+      {^key, value} -> String.downcase(value)
+      nil -> nil
+    end
   end
 end
diff --git a/lib/exkismet/api.ex b/lib/exkismet/api.ex
deleted file mode 100644
index d6137d6..0000000
--- a/lib/exkismet/api.ex
+++ /dev/null
@@ -1,88 +0,0 @@
-defmodule Exkismet.Api do
-  @moduledoc """
-  Provides a simple method for calling the Akismet API.  To use, be sure to set
-  your hostname, and api key by adding the following line in config.exs:
-
-  `config :exkismet, key: "<your api key>", blog: "http://yourhostname.com"`
-  """
-
-
-  @doc """
-  Validates your API key with akismet.com.  If this fails, it's probably because
-  you haven't set your API key in config.exs, like so:
-
-  `config :exkismet, key: "<your api key>", blog: "http://yourhostname.com" `
-  """
-  def verify do
-    case Exkismet.Service.verify do
-      %{body: "valid"} -> :valid
-      error -> {:invalid, error}
-    end
-  end
-
-
-  @doc """
-  Checks a comment with Akismet.  Takes a map of meta data about the comment,
-  using the following keys:
-  ```
-  is_test: <true> if you're testing, leave it out otherwise  Keeps Akismet from
-    using this message for training,
-  ```
-
-  These attributes are required.
-  ```
-  blog: "http://<yourhostname>.com",
-  user_agent: the user agent of the *commenter*
-  user_ip: the ip of the commenter
-  ```
-  The following are optional, but the more you have the better it works.
-  ```
-  referrer: "http://google.com",
-
-  blog_charset: "UTF-8", // character set of the comment
-
-  comment_post_modified_gmt: "2015-12-30T10:40:10.047-0500", time that the blogpost
-    was updated in UTC, ISO8601 format.
-
-  comment_date_gmt: "2015-12-30T10:41:28.448-0500", time the comment was created
-    in UTC, ISO8601 format
-
-  comment_content: <the comment itself>,
-  comment_author_url: <the authors URL>,
-  comment_author_email: "bigboss@mrspam.com",
-  comment_author: "viagra-test-123",
-  comment_type: "comment", (other types include tracbacks, etc)
-  permalink: "http://127.0.0.1/my_blog_post",
-  ```
-  """
-  def comment_check(comment) when is_map(comment) do
-    case Exkismet.Service.comment_check(comment) do
-      %{headers: %{"X-akismet-pro-tip" => "discard"}} -> :discard
-      %{body: "true"} -> :spam
-      %{body: "false"} -> :ham
-      error -> {:error, error}
-    end
-  end
-
-  @doc """
-  Report a comment as being spam.  Uses the same fields as described in
-  Exkismet.Api.comment_check
-  """
-  def submit_spam(comment) when is_map(comment) do
-    case Exkismet.Service.submit_spam(comment) do
-      %{body: "Thanks" <> _} -> :ok
-      error -> {:error, error}
-    end
-  end
-
-  @doc """
-  Report a comment as being ham (not spam).  Uses the same fields as described in
-  Exkismet.Api.comment_check
-  """
-  def submit_ham(comment) when is_map(comment) do
-    case Exkismet.Service.submit_ham do
-      %{body: "Thanks" <> _} -> :ok
-      error -> {:error, error}
-    end
-  end
-end
diff --git a/lib/exkismet/comment.ex b/lib/exkismet/comment.ex
new file mode 100644
index 0000000..ca4618e
--- /dev/null
+++ b/lib/exkismet/comment.ex
@@ -0,0 +1,78 @@
+defmodule Exkismet.Comment do
+  @moduledoc """
+  Structure to represent a comment that is going to be sent to Akismet.
+
+  These attributes are required.
+  * `blog`: The front page or home URL of the instance making the request. For a blog or wiki this would be the front page. Note: Must be a full URI, including http://.
+  * `user_ip`:  IP address of the comment submitter.
+
+  The following are optional, but the more you have the better it works.
+  * `user_agent`: User agent string of the web browser submitting the comment. Not to be confused with the user agent of your Akismet library.
+  * `referrer`: the referrer, such as `"http://google.com"`
+  * `blog_charset`: The character encoding for the form values included in comment_* parameters, such as `"UTF-8"` or `"ISO-8859-1"`. Defaults to `"UTF-8"`
+  * `blog_lang`: Indicates the language(s) in use on the blog or site, in [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format, comma-separated. A site with articles in English and French might use `"en, fr_ca"`.
+  * `comment_post_modified_gmt`: time that the blogpost was updated in UTC, [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
+  * `comment_date_gmt`: The UTC timestamp of the creation of the comment, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. May be omitted for comment-check requests if the comment is sent to the API at the time it is created.
+  * `comment_content`: The content that was submitted.
+  * `comment_author_url`: URL submitted with comment. Only send a URL that was manually entered by the user, not an automatically generated URL like the user’s profile URL on your site.
+  * `comment_author_email`: the author's email, such as `"bigboss@mrspam.com"`,
+  * `comment_author`: the author's username, such as `"viagra-test-123"`,
+  * `comment_type`: describes the type of content being sent. Defaults to `:comment`. Typical values are:
+    * `"comment"`: A blog comment.
+    * `"forum-post"`: A top-level forum post.
+    * `"reply"`: A reply to a top-level forum post.
+    * `"blog-post"`: A blog post.
+    * `"contact-form"`: A contact form or feedback form submission.
+    * `"signup"`: A new user account.
+    * `"message"`: A message sent between just a few users.
+
+    You may send a value not listed above if none of them accurately describe your content. This is further explained [here](http://blog.akismet.com/2012/06/19/pro-tip-tell-us-your-comment_type/).
+  * `permalink`: The full permanent URL of the entry the comment was submitted to.
+  * `user_role`: The user role of the user who submitted the comment. This is an optional parameter. If you set it to “administrator”, Exkismet will always return `:ham`.
+  * `is_test`: `true` if you're testing. Keeps Akismet from using this message for training. Defaults to `false`.
+  * `recheck_reason`:  If you are sending content to Akismet to be rechecked, such as a post that has been edited or old pending comments that you’d like to recheck, include the parameter `recheck_reason` with a string describing why the content is being rechecked. For example, `recheck_reason=edit`.
+  """
+
+  @type t :: %Exkismet.Comment{
+          is_test: boolean(),
+          blog: String.t(),
+          blog_lang: String.t() | nil,
+          user_agent: String.t() | nil,
+          user_ip: String.t(),
+          referrer: String.t() | nil,
+          blog_charset: String.t() | nil,
+          comment_post_modified_gmt: String.t() | nil,
+          comment_date_gmt: String.t() | nil,
+          comment_content: String.t() | nil,
+          comment_author_url: String.t() | nil,
+          comment_author_email: String.t() | nil,
+          comment_author: String.t() | nil,
+          comment_type: String.t(),
+          permalink: String.t() | nil,
+          user_role: :administrator | nil,
+          honeypot_field_name: String.t(),
+          recheck_reason: String.t()
+        }
+
+  @enforce_keys [:blog, :user_ip]
+  defstruct [
+    :blog,
+    :blog_lang,
+    :user_role,
+    :recheck_reason,
+    :honeypot_field_name,
+    :user_agent,
+    :user_ip,
+    :referrer,
+    :comment_post_modified_gmt,
+    :comment_date_gmt,
+    :comment_content,
+    :comment_author_url,
+    :comment_author_email,
+    :comment_author,
+    :permalink,
+    comment_type: "comment",
+    blog_charset: "UTF-8",
+    is_test: false
+  ]
+end
diff --git a/lib/exkismet/service.ex b/lib/exkismet/service.ex
index d652b57..3a3b586 100644
--- a/lib/exkismet/service.ex
+++ b/lib/exkismet/service.ex
@@ -1,44 +1,69 @@
 defmodule Exkismet.Service do
   @moduledoc false
-  
+
   use HTTPoison.Base
+  alias Exkismet.Comment
 
   @akismet_verify_url "https://rest.akismet.com/1.1/"
   @akismet_api_base ".rest.akismet.com/1.1/"
 
+  @spec verify(key: String.t(), blog: String.t(), request_user_agent: String.t()) ::
+          HTTPoison.Response.t()
+  def verify([key: key, blog: blog] = query) when is_binary(key) and is_binary(blog) do
+    simple_query = Keyword.delete(query, :request_user_agent)
 
-  def verify do
-    query = [key: key, blog: blog]
-    post!("verify-key", query, headers)
+    do_post("verify-key", simple_query,
+      request_user_agent: Keyword.get(query, :request_user_agent)
+    )
   end
 
-
-  def comment_check(comment) when is_map(comment) do
-    post!("comment-check", comment, headers)
+  @spec comment_check(comment :: Comment.t(), options :: Exkismet.options()) ::
+          HTTPoison.Response.t()
+  def comment_check(%Comment{} = comment, options) do
+    do_post("comment-check", comment, options)
   end
 
-  def submit_spam(comment) when is_map(comment) do
-    post!("submit-spam", comment, headers)
+  @spec submit_spam(comment :: Comment.t(), options :: Exkismet.options()) ::
+          HTTPoison.Response.t()
+  def submit_spam(%Comment{} = comment, options) do
+    do_post("submit-spam", comment, options)
   end
 
-  def submit_ham(comment) when is_map(comment) do
-    post!("submit-ham", comment, headers)
+  @spec submit_ham(comment :: Comment.t(), options :: Exkismet.options()) ::
+          HTTPoison.Response.t()
+  def submit_ham(%Comment{} = comment, options) do
+    do_post("submit-ham", comment, options)
   end
 
+  def process_request_body(body) when is_struct(body),
+    do: body |> Map.from_struct() |> process_request_body()
 
-  defp process_request_body(body), do: body |> URI.encode_query
-
-  defp process_headers(headers), do: headers |> Enum.into(%{})
-
-  defp process_url("verify-key"), do: @akismet_verify_url <> "verify-key"
-  defp process_url(endpoint), do: "http://" <> key <> @akismet_api_base <> endpoint
+  def process_request_body(body), do: body |> URI.encode_query()
 
-  defp headers do
-    %{"Content-Type" => "application/x-www-form-urlencoded"}
+  @spec do_post(String.t(), any(), Exkismet.options()) :: HTTPoison.Response.t()
+  defp do_post("verify-key", data, options) do
+    post!(@akismet_verify_url <> "verify-key", data, headers(options))
   end
 
-  defp key, do: Application.get_env(:exkismet, :key)
-  defp blog, do: Application.get_env(:exkismet, :blog)
+  defp do_post(action, data, options) do
+    post!(
+      "http://" <> Keyword.fetch!(options, :key) <> @akismet_api_base <> action,
+      data,
+      headers(options)
+    )
+  end
 
+  @spec headers(Keyword.t()) :: map()
+  defp headers(options) do
+    %{"Content-Type" => "application/x-www-form-urlencoded", "User-Agent" => user_agent(options)}
+  end
 
+  @spec user_agent(Keyword.t()) :: String.t()
+  defp user_agent(options) do
+    Keyword.get(
+      options,
+      :request_user_agent,
+      "Exkismet/#{Application.spec(:exkismet, :vsn) |> to_string()}"
+    )
+  end
 end
diff --git a/mix.exs b/mix.exs
index e60fd91..7f3f08c 100644
--- a/mix.exs
+++ b/mix.exs
@@ -2,14 +2,16 @@ defmodule Exkismet.Mixfile do
   use Mix.Project
 
   def project do
-    [app: :exkismet,
-     version: "0.0.2",
-     elixir: "~> 1.2",
-     description: description,
-     package: package,
-     build_embedded: Mix.env == :prod,
-     start_permanent: Mix.env == :prod,
-     deps: deps]
+    [
+      app: :exkismet,
+      version: "0.0.3",
+      elixir: "~> 1.10",
+      description: description(),
+      package: package(),
+      build_embedded: Mix.env() == :prod,
+      start_permanent: Mix.env() == :prod,
+      deps: deps()
+    ]
   end
 
   defp package do
@@ -22,8 +24,7 @@ defmodule Exkismet.Mixfile do
 
   defp description do
     """
-    A client (completely unofficial) for the Akismet.com comment-spam detection
-    API.
+    A client (completely unofficial) for the Akismet.com comment-spam detection API.
     """
   end
 
@@ -31,8 +32,7 @@ defmodule Exkismet.Mixfile do
   #
   # Type "mix help compile.app" for more information
   def application do
-    [applications: [:logger, :httpoison],
-     mod: {Exkismet, []}]
+    []
   end
 
   # Dependencies can be Hex packages:
@@ -46,10 +46,11 @@ defmodule Exkismet.Mixfile do
   # Type "mix help deps" for more examples and options
   defp deps do
     [
-     {:httpoison, "~> 0.8.0"},
-     {:poison, "~> 1.5"},
-     {:ex_doc, "~> 0.11", only: :dev},
-     {:earmark, ">= 0.0.0", only: :dev}
+      {:httpoison, "~> 1.8"},
+      {:ex_doc, "~> 0.25", only: :dev},
+      {:credo, "~> 1.5", only: [:dev, :test], runtime: false},
+      {:doctor, "~> 0.18.0", only: :dev},
+      {:dialyxir, "~> 1.0", only: [:dev], runtime: false}
     ]
   end
 end
diff --git a/mix.lock b/mix.lock
index 49cd7c3..ee33e80 100644
--- a/mix.lock
+++ b/mix.lock
@@ -1,14 +1,33 @@
-%{"cdp": {:git, "https://github.com/cameronp/cdp.git", "0e0786167232b2ca1a1dee58a9f1f4c0b91f8b94", []},
-  "certifi": {:hex, :certifi, "0.3.0"},
+%{
+  "bunt": {:hex, :bunt, "0.2.0", "951c6e801e8b1d2cbe58ebbd3e616a869061ddadcc4863d0a2182541acae9a38", [:mix], [], "hexpm", "7af5c7e09fe1d40f76c8e4f9dd2be7cebd83909f31fee7cd0e9eadc567da8353"},
+  "cdp": {:git, "https://github.com/cameronp/cdp.git", "0e0786167232b2ca1a1dee58a9f1f4c0b91f8b94", []},
+  "certifi": {:hex, :certifi, "2.8.0", "d4fb0a6bb20b7c9c3643e22507e42f356ac090a1dcea9ab99e27e0376d695eba", [:rebar3], [], "hexpm", "6ac7efc1c6f8600b08d625292d4bbf584e14847ce1b6b5c44d983d273e1097ea"},
   "combine": {:hex, :combine, "0.7.0"},
+  "credo": {:hex, :credo, "1.5.6", "e04cc0fdc236fefbb578e0c04bd01a471081616e741d386909e527ac146016c6", [:mix], [{:bunt, "~> 0.2.0", [hex: :bunt, repo: "hexpm", optional: false]}, {:file_system, "~> 0.2.8", [hex: :file_system, repo: "hexpm", optional: false]}, {:jason, "~> 1.0", [hex: :jason, repo: "hexpm", optional: false]}], "hexpm", "4b52a3e558bd64e30de62a648518a5ea2b6e3e5d2b164ef5296244753fc7eb17"},
   "dbg": {:git, "https://github.com/fishcakez/dbg.git", "ce8fae0886eabb4944227a640261d6938cf099f2", []},
-  "earmark": {:hex, :earmark, "0.2.0"},
-  "ex_doc": {:hex, :ex_doc, "0.11.2"},
-  "hackney": {:hex, :hackney, "1.4.7"},
-  "httpoison": {:hex, :httpoison, "0.8.0"},
-  "idna": {:hex, :idna, "1.0.2"},
-  "mimerl": {:hex, :mimerl, "1.0.2"},
-  "poison": {:hex, :poison, "1.5.0"},
-  "ssl_verify_hostname": {:hex, :ssl_verify_hostname, "1.0.5"},
+  "decimal": {:hex, :decimal, "2.0.0", "a78296e617b0f5dd4c6caf57c714431347912ffb1d0842e998e9792b5642d697", [:mix], [], "hexpm", "34666e9c55dea81013e77d9d87370fe6cb6291d1ef32f46a1600230b1d44f577"},
+  "dialyxir": {:hex, :dialyxir, "1.1.0", "c5aab0d6e71e5522e77beff7ba9e08f8e02bad90dfbeffae60eaf0cb47e29488", [:mix], [{:erlex, ">= 0.2.6", [hex: :erlex, repo: "hexpm", optional: false]}], "hexpm", "07ea8e49c45f15264ebe6d5b93799d4dd56a44036cf42d0ad9c960bc266c0b9a"},
+  "doctor": {:hex, :doctor, "0.18.0", "114934c1740239953208a39db617699b7e2660770e81129d7f95cdf7837ab766", [:mix], [{:decimal, "~> 2.0", [hex: :decimal, repo: "hexpm", optional: false]}], "hexpm", "829c88c365f72c0666e443ea670ffb6f180de7b90c23d536edabdd8c722b88f4"},
+  "earmark": {:hex, :earmark, "0.2.0", "bc1636bc2efa0c1c172a5bcbf7c8eb73632d8c4512a6c2dac02d2ae454750af6", [:mix], [], "hexpm", "c41090d8da1eab901250104081ec24cd9aa9282199021b89d7a99e16a2fa6548"},
+  "earmark_parser": {:hex, :earmark_parser, "1.4.15", "b29e8e729f4aa4a00436580dcc2c9c5c51890613457c193cc8525c388ccb2f06", [:mix], [], "hexpm", "044523d6438ea19c1b8ec877ec221b008661d3c27e3b848f4c879f500421ca5c"},
+  "erlex": {:hex, :erlex, "0.2.6", "c7987d15e899c7a2f34f5420d2a2ea0d659682c06ac607572df55a43753aa12e", [:mix], [], "hexpm", "2ed2e25711feb44d52b17d2780eabf998452f6efda104877a3881c2f8c0c0c75"},
+  "ex_doc": {:hex, :ex_doc, "0.25.3", "3edf6a0d70a39d2eafde030b8895501b1c93692effcbd21347296c18e47618ce", [:mix], [{:earmark_parser, "~> 1.4.0", [hex: :earmark_parser, repo: "hexpm", optional: false]}, {:makeup_elixir, "~> 0.14", [hex: :makeup_elixir, repo: "hexpm", optional: false]}, {:makeup_erlang, "~> 0.1", [hex: :makeup_erlang, repo: "hexpm", optional: false]}], "hexpm", "9ebebc2169ec732a38e9e779fd0418c9189b3ca93f4a676c961be6c1527913f5"},
+  "file_system": {:hex, :file_system, "0.2.10", "fb082005a9cd1711c05b5248710f8826b02d7d1784e7c3451f9c1231d4fc162d", [:mix], [], "hexpm", "41195edbfb562a593726eda3b3e8b103a309b733ad25f3d642ba49696bf715dc"},
+  "hackney": {:hex, :hackney, "1.18.0", "c4443d960bb9fba6d01161d01cd81173089686717d9490e5d3606644c48d121f", [:rebar3], [{:certifi, "~>2.8.0", [hex: :certifi, repo: "hexpm", optional: false]}, {:idna, "~>6.1.0", [hex: :idna, repo: "hexpm", optional: false]}, {:metrics, "~>1.0.0", [hex: :metrics, repo: "hexpm", optional: false]}, {:mimerl, "~>1.1", [hex: :mimerl, repo: "hexpm", optional: false]}, {:parse_trans, "3.3.1", [hex: :parse_trans, repo: "hexpm", optional: false]}, {:ssl_verify_fun, "~>1.1.0", [hex: :ssl_verify_fun, repo: "hexpm", optional: false]}, {:unicode_util_compat, "~>0.7.0", [hex: :unicode_util_compat, repo: "hexpm", optional: false]}], "hexpm", "9afcda620704d720db8c6a3123e9848d09c87586dc1c10479c42627b905b5c5e"},
+  "httpoison": {:hex, :httpoison, "1.8.0", "6b85dea15820b7804ef607ff78406ab449dd78bed923a49c7160e1886e987a3d", [:mix], [{:hackney, "~> 1.17", [hex: :hackney, repo: "hexpm", optional: false]}], "hexpm", "28089eaa98cf90c66265b6b5ad87c59a3729bea2e74e9d08f9b51eb9729b3c3a"},
+  "idna": {:hex, :idna, "6.1.1", "8a63070e9f7d0c62eb9d9fcb360a7de382448200fbbd1b106cc96d3d8099df8d", [:rebar3], [{:unicode_util_compat, "~>0.7.0", [hex: :unicode_util_compat, repo: "hexpm", optional: false]}], "hexpm", "92376eb7894412ed19ac475e4a86f7b413c1b9fbb5bd16dccd57934157944cea"},
+  "jason": {:hex, :jason, "1.2.2", "ba43e3f2709fd1aa1dce90aaabfd039d000469c05c56f0b8e31978e03fa39052", [:mix], [{:decimal, "~> 1.0 or ~> 2.0", [hex: :decimal, repo: "hexpm", optional: true]}], "hexpm", "18a228f5f0058ee183f29f9eae0805c6e59d61c3b006760668d8d18ff0d12179"},
+  "makeup": {:hex, :makeup, "1.0.5", "d5a830bc42c9800ce07dd97fa94669dfb93d3bf5fcf6ea7a0c67b2e0e4a7f26c", [:mix], [{:nimble_parsec, "~> 0.5 or ~> 1.0", [hex: :nimble_parsec, repo: "hexpm", optional: false]}], "hexpm", "cfa158c02d3f5c0c665d0af11512fed3fba0144cf1aadee0f2ce17747fba2ca9"},
+  "makeup_elixir": {:hex, :makeup_elixir, "0.15.1", "b5888c880d17d1cc3e598f05cdb5b5a91b7b17ac4eaf5f297cb697663a1094dd", [:mix], [{:makeup, "~> 1.0", [hex: :makeup, repo: "hexpm", optional: false]}, {:nimble_parsec, "~> 1.1", [hex: :nimble_parsec, repo: "hexpm", optional: false]}], "hexpm", "db68c173234b07ab2a07f645a5acdc117b9f99d69ebf521821d89690ae6c6ec8"},
+  "makeup_erlang": {:hex, :makeup_erlang, "0.1.1", "3fcb7f09eb9d98dc4d208f49cc955a34218fc41ff6b84df7c75b3e6e533cc65f", [:mix], [{:makeup, "~> 1.0", [hex: :makeup, repo: "hexpm", optional: false]}], "hexpm", "174d0809e98a4ef0b3309256cbf97101c6ec01c4ab0b23e926a9e17df2077cbb"},
+  "metrics": {:hex, :metrics, "1.0.1", "25f094dea2cda98213cecc3aeff09e940299d950904393b2a29d191c346a8486", [:rebar3], [], "hexpm", "69b09adddc4f74a40716ae54d140f93beb0fb8978d8636eaded0c31b6f099f16"},
+  "mimerl": {:hex, :mimerl, "1.2.0", "67e2d3f571088d5cfd3e550c383094b47159f3eee8ffa08e64106cdf5e981be3", [:rebar3], [], "hexpm", "f278585650aa581986264638ebf698f8bb19df297f66ad91b18910dfc6e19323"},
+  "nimble_parsec": {:hex, :nimble_parsec, "1.1.0", "3a6fca1550363552e54c216debb6a9e95bd8d32348938e13de5eda962c0d7f89", [:mix], [], "hexpm", "08eb32d66b706e913ff748f11694b17981c0b04a33ef470e33e11b3d3ac8f54b"},
+  "parse_trans": {:hex, :parse_trans, "3.3.1", "16328ab840cc09919bd10dab29e431da3af9e9e7e7e6f0089dd5a2d2820011d8", [:rebar3], [], "hexpm", "07cd9577885f56362d414e8c4c4e6bdf10d43a8767abb92d24cbe8b24c54888b"},
+  "poison": {:hex, :poison, "1.5.0", "f2f4f460623a6f154683abae34352525e1d918380267cdbd949a07ba57503248", [:mix], [], "hexpm", "a31ffdaf77494ff12d6c2c9cb03235d4373596d2faf62ee5b99c1ae479618400"},
+  "ssl_verify_fun": {:hex, :ssl_verify_fun, "1.1.6", "cf344f5692c82d2cd7554f5ec8fd961548d4fd09e7d22f5b62482e5aeaebd4b0", [:make, :mix, :rebar3], [], "hexpm", "bdb0d2471f453c88ff3908e7686f86f9be327d065cc1ec16fa4540197ea04680"},
+  "ssl_verify_hostname": {:hex, :ssl_verify_hostname, "1.0.5", "2e73e068cd6393526f9fa6d399353d7c9477d6886ba005f323b592d389fb47be", [:make], [], "hexpm", "f2cb11e6144e10ab39d1e14bf9fb2437b690979c70bf5428e9dc4bfaf1dfeabf"},
   "timex": {:hex, :timex, "0.19.5"},
-  "tzdata": {:hex, :tzdata, "0.5.6"}}
+  "tzdata": {:hex, :tzdata, "0.5.6"},
+  "unicode_util_compat": {:hex, :unicode_util_compat, "0.7.0", "bc84380c9ab48177092f43ac89e4dfa2c6d62b40b8bd132b1059ecc7232f9a78", [:rebar3], [], "hexpm", "25eee6d67df61960cf6a794239566599b09e17e668d3700247bc498638152521"},
+}
diff --git a/test/api_test.exs b/test/api_test.exs
deleted file mode 100644
index 0607a02..0000000
--- a/test/api_test.exs
+++ /dev/null
@@ -1,46 +0,0 @@
-defmodule ApiTest do
-  use ExUnit.Case
-
-  import Exkismet.Api
-
-  test "verify" do
-    assert verify
-  end
-
-  test "submit_spam" do
-    assert submit_spam(spam_comment) == :ok
-  end
-
-  test "submit_ham" do
-    assert submit_spam(spam_comment) == :ok
-  end
-
-  test "check spam comment" do
-    assert comment_check(spam_comment) == :spam
-  end
-
-  test "check normal comment" do
-    assert comment_check(normal_comment) == :ham
-  end
-
-  def normal_comment, do: spam_comment |> Map.put(:comment_author, "mr. normal")
-
-  def spam_comment do
-    %{
-      blog: "http://127.0.0.1",
-      is_test: true,
-      blog_charset: "UTF-8",
-      comment_post_modified_gmt: "2015-12-30T10:40:10.047-0500",
-      comment_date_gmt: "2015-12-30T10:41:28.448-0500",
-      comment_content: "I like big butz and you can too.",
-      comment_author_url: "www.mrspam.com",
-      comment_author_email: "bigboss@mrspam.com",
-      comment_author: "viagra-test-123",
-      comment_type: "comment",
-      permalink: "http://127.0.0.1/my_big_post",
-      referrer: "http://google.com",
-      user_agent: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.106 Safari/537.36",
-      user_ip: "192.168.0.5"
-    }
-  end
-end
diff --git a/test/exkismet_test.exs b/test/exkismet_test.exs
index 019dc3f..2add5d3 100644
--- a/test/exkismet_test.exs
+++ b/test/exkismet_test.exs
@@ -1,8 +1,58 @@
-defmodule ExkismetTest do
+defmodule ApiTest do
   use ExUnit.Case
-  doctest Exkismet
 
-  test "the truth" do
-    assert 1 + 1 == 2
+  import Exkismet
+
+  test "verify" do
+    assert verify(key: key(), blog: "http://127.0.0.1")
+  end
+
+  test "submit_spam" do
+    assert submit_spam(spam_comment(), key: key()) == :ok
+  end
+
+  test "submit_ham" do
+    assert submit_spam(spam_comment(), key: key()) == :ok
+  end
+
+  test "check spam comment" do
+    assert comment_check(spam_comment(), key: key(), request_user_agent: "Exkismet Testing Tool") ==
+             :spam
+  end
+
+  test "check normal comment" do
+    assert comment_check(normal_comment(), key: key()) == :ham
+  end
+
+  defp normal_comment,
+    do: %Exkismet.Comment{
+      spam_comment()
+      | user_role: :administrator,
+        comment_author: "Someone",
+        comment_author_email: "Somewhere"
+    }
+
+  defp spam_comment do
+    %Exkismet.Comment{
+      blog: "http://127.0.0.1",
+      is_test: true,
+      blog_charset: "UTF-8",
+      comment_post_modified_gmt: "2015-12-30T10:40:10.047-0500",
+      comment_date_gmt: "2015-12-30T10:41:28.448-0500",
+      comment_content: "I like big butz and you can too.",
+      comment_author_url: "www.mrspam.com",
+      comment_author_email: "akismet-guaranteed-spam@example.com",
+      comment_author: "viagra-test-123",
+      comment_type: :comment,
+      permalink: "http://127.0.0.1/my_big_post",
+      referrer: "http://google.com",
+      user_agent:
+        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.106 Safari/537.36",
+      user_ip: "192.168.0.5"
+    }
+  end
+
+  defp key do
+    System.get_env("AKISMET_KEY")
   end
 end
-- 
2.46.0

